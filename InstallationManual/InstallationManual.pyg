https://github.com/Research-Project-Crypto/DataCollector.git
\end{lstlisting}

you will need a binance api key and secret to get started collecting crypto price data but this can be aquired for free by making a binance account and going to the \href{https://www.binance.com/en/my/settings/api-management}{Binance API management page}[1], create an API-key and put it inside the crypto.py file.

collecting price data can take a long time depending on how much data you want, to prevent API bans there is timer between each api call. you can always stop the program when you think you have enough data.

To fetch reddit data you will also need to create an application on their site that has an api key and login. This can be found \href{https://www.reddit.com/prefs/apps}{here}[2]

\section{Ticker Timescale-swap}

The ticker timescale-swap application is used for changing the timescale of ticker data.

For example you'll most likely want to convert the most accurate data you have (1min ticker) to something less specific than that (5min / 10min / etc...)

\subsection{Cloning}

\begin{lstlisting}[language=bash]
git clone
https://github.com/Research-Project-Crypto/TickerTimescaleSwap.git
--recursive
\end{lstlisting}

If you forgot to clone the repository with the recursive argument you always use the following command:

\begin{lstlisting}[language=bash]
git submodule update --init --recursive
\end{lstlisting}

\subsection{Build Dependencies}

The following commands are for Arch based systems, they will give you an idea on what's required to port it to other systems.

\begin{lstlisting}[language=bash]
pacman -S --noconfirm --needed gcc make
pacman -S --noconfirm --needed premake
\end{lstlisting}

\subsection{Compiling the Application}

\begin{lstlisting}[language=bash]
generate build instructions
premake5 gmake2

compile the actual application
make config=release
\end{lstlisting}

\subsection{Using the Application}

\subsubsection{Changing time rescale ratio}

By default the time rescale is 1:60, currently you can't dynamically define this through command argument, so you'll have to to edit the code directly and recompile. To change the ratio go into the src/main.cpp file and locate where the processor.start() is called. If you pass a number in the .start method you can set the time rescale.

\subsubsection{Arguments}

\begin{table}[H]
\begin{tabular}{ll}
\textbf{Position} & \textbf{Argument}  \\
1                 & Data Input Folder  \\
2                 & Data Output Folder
\end{tabular}
\end{table}

Example:
\begin{lstlisting}[language=bash]
TickerTimescaleSwap data/input_folder data/output_folder
\end{lstlisting}

\subsection{Verify Data Integrity}

Included with this project is a python script with which you can verify the binary output data.

\begin{lstlisting}[language=bash]
python3 scripts/binary_reader.py
\end{lstlisting}

It will loop over all the cells slowly, this mostly to shortly verify calculation mistakes in the program.

\section{Data Preprocessor}

\subsection{cloning}

\begin{lstlisting}[language=bash]
git clone https://github.com/Research-Project-Crypto/DataPreprocessor.git --recursive
\end{lstlisting}

If you forgot to clone the repository with the recursive argument you always use the following command:

\begin{lstlisting}[language=bash]
git submodule update --init --recursive
\end{lstlisting}

\subsection{Build Dependencies}

The following commands are for Arch based systems, they will give you an idea on what's required to port it to other systems.

\begin{lstlisting}[language=bash]
pacman -S --noconfirm --needed gcc make
pacman -S --noconfirm --needed premake

yay -S ta-lib
# or
paru -S ta-lib
\end{lstlisting}

\subsection{Compiling the Application}

\begin{lstlisting}[language=bash]
generate build instructions
premake5 gmake2

compile the actual application
make config=release
\end{lstlisting}

\subsection{Using the Application}

With Arguments
\begin{table}[H]
\begin{tabular}{ll}
\textbf{Position} & \textbf{Argument}  \\
1                 & Data Input Folder  \\
2                 & Data Output Folder
\end{tabular}
\end{table}

Example:
\begin{lstlisting}[language=bash]
DataProcessor data/input_folder data/output_folder
\end{lstlisting}

Downside of argument only.
With argument only mode you are unable to specify the type of the input data, you can only parse CSV text data.

Using settings.json
If you don't give any arguments the application will default to reading the settings from settings.json. only use the is\_binary option when you used our time rescaler since this will output to binary files to save disk space.

\begin{lstlisting}[language=json]
{
    "input": {
        "input_folder": "data/input",
        "is_binary": false
    },
    "output": {
        "output_folder": "data/output"
    }
}
\end{lstlisting}


\subsection{Verify Data Integrity}

Included with this project is a python script with which you can verify the binary output data.

\begin{lstlisting}[language=bash]
python3 scripts/binary_reader.py
\end{lstlisting}

It will loop over all the cells slowly, this mostly to shortly verify calculation mistakes in the program.

\section{References}
[1] Binance api management settings: \newline \href{https://www.binance.com/en/my/settings/api-management}{https://www.binance.com/en/my/settings/api-management}
\newline
[2] reddit application page \href{https://www.reddit.com/prefs/apps}{https://www.reddit.com/prefs/apps}

\end{document}
